<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用Python解决离散数学问题]]></title>
    <url>%2F2019%2F03%2F17%2F%E5%88%A4%E6%96%AD%E5%90%88%E5%BC%8F%E5%85%AC%E5%BC%8F%20%2F</url>
    <content type="text"><![CDATA[前言&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你没有听错，用python程序来解决离散数学的逻辑推理问题，我当我第一次听老师说的时候也很吃惊（再说上学期的Python学的也不咋地…..😩)，但经老师讲解后才知道，使用python解题不仅效率高，而且准确性也很强的，所以还是有必要学习以下的。 判断是否为合式公式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一个题目就是判断一个公式是否为合式公式，这也是最基础的，因为只有当在输入的合式公式正确的情况下，才能进一步的运算解题，所以先讲解一下怎么判断合式公式。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先要知道什么是合式公式？(1)原子命题常项或变项是合式公式；(2)如果A是合式公式，则（-A）也是合式公式（- 表示非）；(3)如果A，B是合式公式，则（AB）、（A+B）、（A &lt; B）、（ A ~ B）也是合式公式；(此处 合取 + 析取 &lt; 代表条件 ~ 代表双条件)(4)只有有限次地应用(1)～(3)所包含的命题变元，联结词和括号的符号串才是合式公式。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人思路：输入字符串，扫描字符串，把所含的各关联词分区出来，在判断每个关联词使用是否正确比如不合规则的情况：(1) 关联词所处位置不对(2) 关联词的连续使用(3) 括号不匹配(4) ……..程序中可能会有bug，希望大佬们多多指教 这道题应该有很多好的方法，但我不太会用，我这里只能暴力判断了。废话不多说，直接上代码😎12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import reprint("定义‘!’为否定联结词")print("定义‘&amp;’为合取联结词")print("定义‘-’为析取联结词")print("定义‘&gt;’为蕴含联结词")print("定义‘~’为等价联结词")print("如果公式错误，会指出哪里错误；如果公式正确，则什么也不输出")S =input("请输入需要判断的公式：")T = list(S)if S[0] in ['&amp;','-',')','~','&gt;'] : print("不是合式公式")a ,b,c,d,f ="!" , "&amp;" ,"-" , "&gt;" , "~"if a in T: Q = [m.start() for m in re.finditer(a, S)] for i in Q : if S[-1] == '!' : print ("‘!’联结词使用错误，不是合式公式") break if S[i+1] in ['&amp;','!','-',')','~','&gt;']: print("‘!’联结词使用错误，不是合式公式") break if S[i-1] in ['!']: print("‘!’联结词使用错误，不是合式公式！") breakif b in T: W = [m.start() for m in re.finditer(b, S)] for y in W : if S[-1] == '&amp;' : print ("‘&amp;’联结词使用错误，不是合式公式") break if S[y+1] in ['-',')','~','&gt;','&amp;'] : print("‘&amp;’联结词使用错误，不是合式公式") break if S[y-1] in ['-','(','~','&gt;','&amp;'] : print("‘&amp;’联结词使用错误，不是合式公式") breakif c in T: E = [m.start() for m in re.finditer(c, S)] for h in E : if S[-1] == '-' : print("‘-’联结词使用错误，不是合式公式") break if S[h+1] in (')','&gt;','~','-') : print("‘-’联结词使用错误，不是合式公式") break if S[h-1] in ('&amp;','-','&gt;','~') : print("‘-’联结词使用错误，不是合式公式") breakif d in T: R = [m.start() for m in re.finditer(d, S)] for k in R : if S[-1] == '&gt;' : print ("‘&gt;’联结词使用错误，不是合式公式") break if S[k+1] in [')','&gt;'] : print("‘&gt;’联结词使用错误，不是合式公式") break if S[k-1] in ['(','&gt;'] : print("‘&gt;’联结词使用错误，不是合式公式") breakif f in T: O = [m.start() for m in re.finditer(f, S)] for v in O : if S[-1] == '~' : print("‘~’联结词使用错误，不是合式公式") break if S[v+1] in [')','~'] : print("‘~’联结词使用错误，不是合式公式") break if S[v-1] in ['(','~'] : print("‘~’联结词使用错误，不是合式公式") breakif '(' or ')' in S : e = 0 klb =[] for i in S : if i == '(': klb.append(i) if i == ')': if len(klb)==0: e=1 break else : klb.pop() if len(klb)!=0 : e = 1 if e==1: print("括号使用错误，不是合式公式") &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我也是小白，程序哪里可能有些不足之处，请多多指教，如果你有更好的解题方法或思路，可以联系我，大家可以一起学习，一起进步的！😊]]></content>
      <categories>
        <category>python</category>
        <category>离散数学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>离散数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建]]></title>
    <url>%2F2019%2F03%2F15%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%20%2F</url>
    <content type="text"><![CDATA[前言&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本篇文章用于介绍Hexo个人博客的搭建过程，这也是我搭建本博客后的第一篇文章，分享一下搭建方法，有兴趣的小伙伴也可以自主搭建一个属于自己的博客！ 首先感谢大家的来访支持！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自己本来开始做的是html网页，网页做完之后需要购买服务器和域名（价格不便宜）才能运营，还要定期维护它，对于我个人只是感兴趣做个自己的网页，单单做个html网页就很费力气了，实在是没有精力和时间运营它，所以也没有必要去购买服务器和域名（性价比低），但我做的html网页在我自己的电脑上还是可以运营的（感兴趣的小伙伴可以联系我，一起探讨做html网页的方法）。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次，现在市面上的博客有很多，如CSDN，博客园等平台，可以直接在上面发表，也有很多优点，但缺点是比较不自由，会受到各种限制和恶心的广告。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以我选择了直接在github page平台上托管我的博客，这样可以安心写作，也不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客也很简单。我在两天内完成了Hexo-Github个人博客的基本搭建（其实搭建不难，自己脑子笨，做的慢些了……）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里记录一下我的第搭建一个博客，并给大家分享一下搭建的流程，以及在搭建过程中遇到的问题和解决方案。如果你也有搭建个人博客的想法，希望能给你一点经验帮助。 大家都是新手，可以分享经验，互相交流学习的。 搭建经历 ❤2019-3-13：初次看到Hexo-Github搭建个人博客，很感兴趣，便开始了自己博客的搭建； ❤2019-3-14：完成了博客的基本搭建（可以运营），并上传了第一篇文章； ❤2019-3-17：博客搭建工作全部完结（主题优化，程序添加，分类管理……）; ❤未完待续…… 搭建步骤 安装Git 安装Node.js 安装Hexo 注册Github账号并创建新仓库 生产SSH添加到Github 将Hexo部署到Github 修改主题 优化主题 1.安装Git&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接到Git官网下载就行了，右键点击软件使用Git Bash的命令行工具，以后就用这个工具来使用Git 2.安装Node.js&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装同Git一样，也是到Node.js官网下载就可以了。 3.安装Hexo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用下载好的Git Bash来下载Hexo，代码如下： 1npm install hexo-cli -g 4.注册Github账号并创建一个新的仓库&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Github是一个很好的开源项目托管平台，大部分人应该都注册的有账号（有账号的小伙伴可以跳过这步），即使没有注册过也没有关系，只需现在注册下就行了，请参考Github基础设置及使用详解，里面的有详细的注册过程,过程也很简单。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册过账号后，先创建一个新的仓库（创建的具体方法上面的那个网站也有详细过程，但这里需要注意的是，创建的仓库名一定要是 name.github.io,其中name为你注册的Github的用户名，修改成你自己的。 5.生成SSH添加到Github&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先配置SSH，同样使用Git Bash,输入一下代码： 1ssh-keygen -t rsa -C "邮件地址" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中”邮件地址”是你注册Github时填写的邮箱（输入时双引号要带上），输入后要连续按回车键，再等待回应。它会回复： 1Enter file in which to save the key (/c/Users/lenovo/.ssh/id_rsa): &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后进入(/c/Users/lenovo/.ssh/id_rsa.pub),将里面的内容复制下来，再进入Github官网，到GitHub设置-&gt;SSH and GPG keys-&gt;New SSH key，粘贴此处并确定。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再回到Git Bash,输入一下代码： 1ssh -T git@github.com &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于测试SSH是否配置好，看到You&#39;ve successfully authenticated, but GitHub does not provide shell access.则说明配置好了，否则无法使用hexo d。 6. 将Hexo部署到Github&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初始化Hexo12hexo init Blog cd Blog &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Blog可修该城其他名字；cd Blog 指打开Blog文件夹。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装Hexo扩展12npm install hexo-deployer-git --savenpm install &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本地调试123hexo cleanhexo g hexo s &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上传到Github Pages&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上传之前，打开站点配置文件_config.yml，位于站点根目录下，修改最后一部分为如下部分。 1234deploy: type: git repository: git@github.com:name/name.github.io.git #name修改为你的Github用户名 branch: master &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上传到Github 123hexo cleanhexo g hexo d 7.修改主题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主题位置在themes目录下，默认为landscape主题。可从官网https://hexo.io/themes/选择各种下载（得看个人喜好了），推荐NexT主题，以下为安装方法。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装过程就一行代码，站点根目录下运行。 1git clone https://github.com/theme-next/hexo-theme-next themes/next &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后打开站点配置文件_config.yml，找到theme： landscape，把landscape修改为next就可以了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到现在你就已经搭建好了一个属于你自己的博客平台了，赶紧去熟悉熟悉它吧。👍 8.主题优化&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实刚才我们已经搭建好了，并且也可以使用了，但我们仍可以使我们的博客变得更加好看吸引人，以及添加更多的小功能，使我们有更好的体验，也就是进行主题优化。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但由于主题优化内容比较多，所以在这就先不讲解了，不用担心，我会在后续的博客文章中持续更新关于如何进行主题优化，使我们的博客变得“高大上”。🤞]]></content>
      <categories>
        <category>Hexo</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
